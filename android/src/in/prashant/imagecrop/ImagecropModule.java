/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package in.prashant.imagecrop;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiBlob;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.util.TiActivitySupport;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.widget.Toast;

import com.theartofdev.edmodo.cropper.CropImage;
import com.theartofdev.edmodo.cropper.CropImageView;



@SuppressWarnings("unused")
@Kroll.module(name="Imagecrop", id="in.prashant.imagecrop")
public class ImagecropModule extends KrollModule implements TiActivityResultHandler
{
	private static final String LCAT = "ImagecropModule";
	private KrollFunction callback;


	public ImagecropModule() {
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(LCAT, "inside onAppCreate");
	}

	private String getStringValue(KrollDict options, String key) {
		return (String) (options.containsKeyAndNotNull(key) ? options.get(key) : "");
	}

	private void setupValues(CropImage.ActivityBuilder cropBuilder, KrollDict options) {
		callback = (KrollFunction) options.get(Params.CALLBACK);
	}

	// Methods
	@Kroll.method
	public void crop(KrollDict options) {
		if (null != options) {
			if (options.containsKeyAndNotNull(Params.CALLBACK)) {
				if (options.get(Params.CALLBACK) instanceof KrollFunction) {
					String sourceFile = getStringValue(options, Params.IMAGE_SOURCE);
					sourceFile = sourceFile.trim();
					sourceFile = sourceFile.replaceFirst("file://", "");

					CropImage.ActivityBuilder cropBuilder = CropImage.activity();
					if (!sourceFile.isEmpty()) {
						sourceFile = "file://" + sourceFile;
						cropBuilder = CropImage.activity(Uri.parse(sourceFile));

					} else {
						cropBuilder = CropImage.activity();
					}

					setupValues(cropBuilder, options);

					Activity activity = TiApplication.getAppCurrentActivity();
					Intent intent = cropBuilder.getIntent(activity);
					
					if (options.containsKeyAndNotNull(Params.ACTIVITY_THEME)) {
						String theme = (String) options.get(Params.ACTIVITY_THEME);
						theme = theme.trim();
						
						if (!theme.isEmpty()) {
							theme = "style." + theme;
							intent.putExtra(Params.ACTIVITY_THEME, theme);
						}
					}
					
					TiActivitySupport actSupport = (TiActivitySupport) activity;
					actSupport.launchActivityForResult(intent, CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE, this);

				} else {
					Toast.makeText(TiApplication.getAppCurrentActivity().getApplicationContext(), "Parameters not passed.", Toast.LENGTH_SHORT).show();
				}
			}
		}
	}


	@Override
	public void onError(Activity activity, int requestCode, Exception exc) {
		KrollDict callbackResult = new KrollDict();
        callbackResult.put("error", "Some error occured");
        callback.callAsync(getKrollObject(), callbackResult);
	}


	@Override
	public void onResult(Activity activity, int requestCode, int resultCode, Intent data) {
		Log.i(LCAT, "Result received..");
    	if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE && resultCode == Activity.RESULT_OK) {
            CropImage.ActivityResult result = CropImage.getActivityResult(data);
            String imagePath = "file://" + result.getUri().getEncodedPath();
            KrollDict callbackResult = new KrollDict();
            callbackResult.put("imagePath", imagePath);
            callback.callAsync(getKrollObject(), callbackResult);
        }
	}
}
